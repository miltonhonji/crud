1. Backend:
1.Para criar o arquivo package.json crud/backend
npm init -y.
pode colocar as dependencias.

2.Local ideal depedencias para construir a api.
npm i json-server

db.json. é todo endpoint da api.

No package.json
"start": "json-server --watch db.json --port3001"
start é o nome utilizado para iniciar o json.
json-serve - chama ele.
--watch db.json -monitorando
--port3001 nesta porta selecionada

Lembrando que faz o npm start
na pasta crud/backend..
e para verificar o db.json 'PRECISA' estar na pasta backend

Um pouco de Postman

GET: ele irá obter o resultado do JSON.
POST -> body -> x.www-form-urlencoded ->name price (ele irá acrescentar um novo registro).
PUT: ele irá alterar o objeto inteiro.
-y responder a pergunta com o mesmo padrão.

Front End:
2. Visão Geral do Angular

O que é o angular? 
um framework JS desenvolvido pelo Google para criação aplicações Web SPA baseada em componentes.
Código TS.
Aplicação single page.

Angular JS 1 -> Angular 2 (baseada em componentes) versão 4. semantica version. 9.1 duas vezes por ano.

Command Line Interface CLI 
npm i -g @angular/cli
ng new minha-app - criar novo projeto.

TypeSript - Linguagem pela Microsoft -> compilado para JavaScript. - browser não conhece o TS.
Orientada a objeto e tipagem forte. Tipo dinamico, string, objeto e array dentro de uma variável, o Type script tipagem.
É um Superset do JavaScript.

Árvore de Componentes:
diferente todos.
MyApp - root
Header -> Nav -> List -> (Item -> Item)
content  -> (ContentTitle -> ProductCrud) -> ProductForm -> (Input/Button)

3.Conceitos Essenciais

Inicialização da App

Main.ts Type Script
-> Chama AppModule (arvores de componentes modularizada, alguns poderes, criar determinados componentes que estão visíveis apenas dentro do módulo.)
Inicializar sua aplicação, (Bootstrapp) inicializar apontar para o componente
AppComponent -> ele irá fazer referência o AppReader, AppFooter. Materials Design.

O que é um componente?

Componente Angular um pedaço de uma aplicação. em trechos de componente que representa o componente visual de sua tela.
Angular (HTML, CSS, TS (Comportamento)). ele tem comportamento, ts, estrutura do html e estilo do CSS.
home.component.css
home.component.html
home.component.ts.

tag <app-home></app-home> (encapsula dentro deste componente).
HCSS TS onde consegue encontrar os arquivos HTML, CSS.

Organização de Módulos.
referencia, para cada componente (arvore de componente)
ele organiza em módulos, os componentes vão estar em módulo.dentro do app.module

Declaration: irá ser declarar todos os componentes que fazem parte daquele módulo. (valendo para a diretivas e pipes).
Para fora do módulo dentro para parte export. (valendo para pipes e diretivas).

Exports tudo que colocou em declaration ou dentro do módulo.
Imports outros módulos, pode depender de outro módulo.(Modulo a, b, c) da aplicação ou módulo externo.
Providers - declarar os services
Bootstrap - AppComponent será carregado naquele módulo, módulo inicial.
esteja disponível na Single Page.
carrega AppModulo.

4.Criando APP com Angular CLI: ng new frontend --minimal (mínimo de instalação arquivo de testes) outro flag

5.Conhecendo os arquivos do projeto.

inline cria um arquivo só.
Main ts. carrega um appmodule. (os componentes que ficam visiveis dentro do módulo).

Bootstrap qual é componente.
Assets imagens ou outra aplicação.
environments de ambiente.
<app-root> - refêrencia a partir do seletor.

6. html <app>
double mustache ira interpretar o valor do nome 
7. Header 
ng generate g c components/header - para gerar o componente header
<app-header>
Declarar o app module MatToolbar e importar 
header display: flex box;
usa em react native, flutter, web ou reactive.
ng g (generate) c para footer
@decorator. component
Atributos directives: Altera a aparência e o comportamento de um elemento, componente ou outra diretiva. (css).
Comportamento: uma diretiva dentro de um determinado botão, e ela faz chamada no backend, (ajax) ação do código executado por trás.
RedDirective.
decorator padrão de projeto. evitar herança, trabalhar com composição. @Directive exibe algum papel dentro de um framework. @directive.dentro da tag html.
Uma diretiva de atributo, ela consegue alterar o estilo com alterar o comportamento (aparências).
Diretivas estruturas altera as estruturas de sua página, altera a dom e removendo os elementos da dom, no html.
A DIRETIVA ESTRUTURAL TEM um Asterisco. - Ele vai exibir ou não elemento se o produto estiver definido ou suprimir um determinado elemento.
*ngFor ele irá acrescentar novos elementos, se tiver 10 produtos, ele vai repetir,mostrando os nomes do produto.
ele está acrescentando novo elemento. diretivas, já vem no angular.
Componente com uma pequena aplicação, entre o seu arquivo TS com o arquivo HTML.
ESTILOS css, componente HTML entre o código TS e o HTML (template e componente com a classe).
colocar o valor [datasource] precisa estar entre parênteses.
dataSource products a string produto passa para a variável produto.
Binding evento (sintáse para o parentêses) o angular não faz a ligação com o (click) 
One way data binding -> binding de atributo, valor do input vai pegar o nome
[(ngModel)]="nome"
input para a variável se alterar na ts [(ngModel)] -> sintaxe two way data Binding (formulários)
ANGULAR ROUTER

PIPES SÃO PROCESSAMENTOS EM CIMA DA VARIAVEL.
Double mustache igual bigode.{{ name || date }}
 passar mais de um parêmetro. cadeia de processamento.
 
Elementos Angular
- Programação Reativa
ReactiveX: RXJAVA, RXJS.
Proativo, significa que irá consumir processamento.  - ele acaba executando mais processador, menos desejado.
O padrão Observer: Padrão orientada a Evento, ele padrão GOF - Gague dos 4.
Subject - quem tem a capacidade de monitorar o evento que acontece.
Observers - São os códigos, as pessoas que estão interessadas em um determinado evento - podemos delegar para este subject. (me avise que o evento aconteceu)preecisar registrar no subject.
explicito desejo de notificações do evento. vai detectar e percebe que o evento aconteceu.notifica todos os observer, do evento que foi gerado.
Reativa vai ser chamada, quando um determinado evento acontecer.
Entendendo Observables:
Callbacks: funcção para outra função (como parâmetro). Quando tem uma lógica complexa - Callbacks Hell.
Promises - usa só uma vez.
Observables é diferente de promises: vantagem consegue reusável, stream dados e operadores - recebe a string de dados em sequência.
Operadores - juntamente com os observadores (then, map, filter). tem como trabalhar com os observables, que ajudam a processar os dados.
string de dados.
Observable, encapsular o padrão observable.
O que são services? São classes que têm como principal objetivo organizar e compartilhar métodos e dados entre componentes. (Separar a responsabilidade).
Ele não te separar services. Como quer viabilizar comunicação entre componentes. (precisa ser compartilhado entre componente A e B).
Compartilhar os dados entre componentes.
Motivação para o service -html, css, ts, lógica, azul responsabilidade visual do componente
Vermelho - não dizem respeito a parte visual do componente.
Service - colocar a logica x (não está mais duplicada).
Mais focado no que deve fazer.
Service ng g s (services/product) aonde na pasta onde queria colocar.
nome do service nome do arquivo.service.ts
Nome da classe ProductService 
Elementos Angular #03
Singleton - uma instância de uma classe.
injeção de dependência - é um padrão no qual a classe recebe as dependências de uma fonte externa ao invés de criar por conta própria.
A precisa da classe B - vai criar a classe B.
Inversão da lógica, recebe as dependências da fonte Externa. - A -> B a classe a recebera a classe b (construtor).
Sempre quando há depende de outra classe. precisará passara o parâmetro, o que precisa passar o motor construido dentro do carro.
Classe de motor para o Carro.

Injeção de Dependência

Injeção de dependências productCreateComponent.
- ProductService gera a instância do productService
ProductCreateComponent - vai receber o ProductService.
root -app.module.
no lugar do root (referência para o módulo). alphi module.
Services são singletons dentro do escopo de um injector.
Module Injector ElementInjector

Componente Home
(colocar o app-home) na nav.
MAT-CARD (Adicionar a biblioteca no app.module).
CSS
rem: um tipo de unidade relativa, relação com o raiz da página.
em: sempre relativo ao pai, relativo ao anterior.

Navegando entre Componentes

TS: os elementos tipado, você consegue ter o code complete (no JS que não tem tanto como a IDE inferir o tipo de objeto).
Diretivas estruturais usam (*) na frente.

ng g d (diretivas)
Diretiva de atributos, é capaz na partee do estilo do componente,
classe de diretiva estrutural

Binding Identity Binding e o Binding de Atributos.
Binding (click) chama o método dentro do componente.


Criação:
Para gerar uma tabela: ng generate @angular/material:table <component-name>
O que o Leonardo mencionou: ng generate @angular/material:table components/product/product-read2
Irá ser alterado no app.module o modulo da tabela, paginação e módulo de ordenação da coluna
Criará os componente ProductRead2Component e o importador os MatTableModule, MatPaginatorModule, MatSortModule.
Já estará disponível para alterar o views-> product-crud e alterar em HTML.
<app-product-read2></app-product-read2>

Para alterar o Product-read2: product-read2/product-read2-datasource. 
É o local aonde estão as informações.

Paginator: product-read2 component.html.
mat-paginator padrão do pageSize="50"
PageSizeOptions [menor página, maior página].
Primeiro ele ordena e depois faz a paginação.
Product-read oficial.
(sem paginação e ordenação).

Sendo um pouco chato:

O que é um atributo? 
R: Os atributos em Programação Orientada a Objetos, são elementos que irão definir a estrutura de uma classe. Também são conhecidos como variáveis de classe e podem ser divididos em dois
tipos básicos: atributos de instância e de classe.
Valores de Atributos de instância, são aqueles que determinam o estado de cada objeto. 
Já os atributos de classe possui um estado que é compartilhaddo por todos os objetos de uma classe. 

Entendendo o componente gerado.

Product-read2.component - ligação de todas informações.
ngOnInit é aonde fica o dataset.
Interface e a lista alocada substituir a data aplicação.
fonte de dados:
Const EXAMPLE_DATA importar a classe Product[] e alterar o preço como opcional.
Alterar em ProductRead2DataSource extends DataSource<Product>: Product[]. 
Existem 

Atualizar o componente:
Remover o ProductRead2Item do import substituir para os produtos.
@ViewChild(MatTable) table: MatTable<Product>;

ele possui três atributos são data (são os dados do produto), paginator (MatPaginador) E sort (MatSort) este componente tem a função de ordenar os produtos (pela seta) e a paginação.
Este componente é visto no componentes  no @(decorator) Ele é filho do tela e filho do componente, ele irá verificar o componente paginator. html.
datasource está sendo criado ngOnInit, ele pega o this.datasource. e os dados de exemplo.
Pode setar o datasource pela própria table.
Ele entede o datasource e a tabela. Os dados a paginação e ordenamento dos dados. (paginação e ordenação) irá impactar na renderização.
Connect irá fazer tudo aqui e a junção dos dados da tabela e renderização da tabela e ordenação.
Um componente rxjs (merge) ele irá juntar os pipes em cima dos dados do array de produtos e getSortedData (ele ordenação dos dados).
GetSortedData ele tem um método que faz as ordenações dos dados.
Também utiliza outro método atual usando splice (pega um subarray e o tamanho da página.)

Estrutura HTML. Component
As Colunas exibidas na tabela (displayedColumns) duas colunas 'id' e 'name'.
matHeaderRowDef(diretiva) ele usa dentro e o componente e criar o componente da tabela.
<tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>, 
esta linha define os nomes que estão na tabela. a parte que define os template e as linhas. uma variável row, uma das linhas.
MatColumn def= id e name (iguais o do display) e os nomes do matColumnDeef (os nomes do cabeçalhos e das colunas.).
Para acrescentar a coluna price (utilizar o product-read2-datasource em const EXAMPLE)DATA: Product[]).
retirado a referencia o product-read2 dentro do crud2.
Desafio: Table datasource databind de proprieda (vincular com o datasource da tabela).

Novos métodos em produto service:
Update já precisará ter um registro preenchido.
Criar o componente de atualização:
ng g c components/product/product-update
Para adicionar a rota Product-crud app-routing-module.ts
  {
    path: "products/update/:id",
    component: ProductUpdateComponent
  } 
Quando é digitado no navegador products/update/10 {terá que aparecer a tela angular para configurar o botão.
Já no HTML product-read.component.html -> no routerLink irá colocar '/products/update/ {{ row.id }}' devido ao let row definido na matCellDef. 

Aula de Excluir 
Local criar a função com a o backend.
implementação da função do backend
Operação do backend - Delete é delete (delete id:string)

Desafio Componente Excluir
